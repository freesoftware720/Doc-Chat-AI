-- DocuChat AI - Initial Database Schema
-- This script sets up all the necessary tables, policies, and functions.
-- To apply, copy the entire content into the Supabase SQL Editor and run it.

-- 1. Create custom types
create type public.workspace_role as enum ('admin', 'member');
comment on type public.workspace_role is 'Defines roles for users within a workspace.';

-- 2. Create tables
create table public.workspaces (
    id uuid primary key default gen_random_uuid(),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    owner_id uuid not null references auth.users(id) on delete cascade,
    name text not null,
    logo_url text,
    brand_color text,
    max_documents integer not null default 10,
    allowed_file_types text[] default array['application/pdf']
);
comment on table public.workspaces is 'Workspaces for multi-tenancy';

create table public.profiles (
    id uuid primary key references auth.users(id) on delete cascade,
    full_name text,
    avatar_url text,
    subscription_plan text default 'Free'::text,
    status text default 'active'::text,
    ban_reason text,
    banned_at timestamp with time zone,
    active_workspace_id uuid references public.workspaces(id) on delete set null,
    referral_code text unique,
    referred_by uuid references public.profiles(id) on delete set null,
    pro_credits integer default 0,
    chat_credits_used integer not null default 0,
    chat_credits_last_reset timestamp with time zone
);
comment on table public.profiles is 'Stores public user profile information.';

create table public.workspace_members (
    workspace_id uuid not null references public.workspaces(id) on delete cascade,
    user_id uuid not null references auth.users(id) on delete cascade,
    role public.workspace_role not null default 'member',
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    primary key (workspace_id, user_id)
);
comment on table public.workspace_members is 'Joins users to workspaces with assigned roles.';

create table public.documents (
    id uuid primary key default gen_random_uuid(),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    user_id uuid not null references auth.users(id) on delete cascade,
    name text not null,
    content text,
    storage_path text not null,
    file_size integer
);
comment on table public.documents is 'Stores uploaded document metadata and extracted text content.';

create table public.messages (
    id uuid primary key default gen_random_uuid(),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    document_id uuid not null references public.documents(id) on delete cascade,
    user_id uuid not null references auth.users(id) on delete cascade,
    role text not null,
    content text not null
);
comment on table public.messages is 'Stores chat messages related to a document.';

create table public.audit_logs (
    id bigint primary key generated by default as identity,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    workspace_id uuid not null references public.workspaces(id) on delete cascade,
    user_id uuid references auth.users(id) on delete set null,
    user_email text,
    action text not null,
    details jsonb
);
comment on table public.audit_logs is 'Audit trail for important workspace events.';

create table public.referrals (
    id bigint primary key generated by default as identity,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    referrer_id uuid not null references public.profiles(id) on delete cascade,
    referred_id uuid not null references public.profiles(id) on delete cascade,
    unique(referrer_id, referred_id)
);
comment on table public.referrals is 'Tracks successful user referrals.';

create table public.app_settings (
    id integer primary key default 1,
    updated_at timestamp with time zone,
    logo_url text,
    homepage_announcement_message text,
    feature_multi_pdf_enabled boolean not null default false,
    feature_chat_templates_enabled boolean not null default true,
    chat_limit_free_user integer not null default 50,
    landing_page_content jsonb,
    constraint id_check check (id = 1)
);
comment on table public.app_settings is 'Global application settings, configurable by super admin.';

-- 3. Set up Row Level Security (RLS)
alter table public.profiles enable row level security;
create policy "Users can view their own profile" on public.profiles for select using (auth.uid() = id);
create policy "Users can update their own profile" on public.profiles for update using (auth.uid() = id);

alter table public.workspaces enable row level security;
create policy "Users can view workspaces they are members of" on public.workspaces for select using (
    id in (select workspace_id from public.workspace_members where user_id = auth.uid())
);
create policy "Admins can update their workspace" on public.workspaces for update using (
    (select role from public.workspace_members where user_id = auth.uid() and workspace_id = id) = 'admin'
);

alter table public.workspace_members enable row level security;
create policy "Users can view memberships of their own workspaces" on public.workspace_members for select using (
    workspace_id in (select workspace_id from public.workspace_members where user_id = auth.uid())
);

alter table public.documents enable row level security;
create policy "Users can manage their own documents" on public.documents for all using (auth.uid() = user_id);

alter table public.messages enable row level security;
create policy "Users can manage their own messages" on public.messages for all using (auth.uid() = user_id);

alter table public.audit_logs enable row level security;
create policy "Admins can view audit logs for their workspace" on public.audit_logs for select using (
    (select role from public.workspace_members where user_id = auth.uid() and workspace_id = audit_logs.workspace_id) = 'admin'
);

-- 4. Create database functions and triggers
-- Function to generate a unique referral code
create or replace function public.generate_referral_code()
returns text
language plpgsql
security definer
as $$
declare
  new_code text;
  is_duplicate boolean;
begin
  loop
    new_code := upper(substring(md5(random()::text) for 8));
    select exists (select 1 from public.profiles where referral_code = new_code) into is_duplicate;
    if not is_duplicate then
      return new_code;
    end if;
  end loop;
end;
$$;
comment on function public.generate_referral_code is 'Generates a unique 8-character referral code for new users.';

-- Function to handle new user signup: creates profile, workspace, and membership.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
declare
  new_workspace_id uuid;
begin
  -- Create a profile for the new user
  insert into public.profiles (id, full_name, avatar_url, referral_code)
  values (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url',
    public.generate_referral_code()
  );

  -- Create a personal workspace for the new user
  insert into public.workspaces (owner_id, name)
  values (new.id, new.raw_user_meta_data->>'full_name' || '''s Workspace')
  returning id into new_workspace_id;

  -- Add the user as an admin to their new workspace
  insert into public.workspace_members (workspace_id, user_id, role)
  values (new_workspace_id, new.id, 'admin');
  
  -- Set the new workspace as the user's active workspace
  update public.profiles
  set active_workspace_id = new_workspace_id
  where id = new.id;

  return new;
end;
$$;
comment on function public.handle_new_user is 'Trigger function to provision necessary resources for a new user.';

-- Trigger to call the function on new user signup
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Function to get a user's chat history across all documents.
create or replace function public.get_user_chat_history()
returns table (
  document_id uuid,
  document_name text,
  last_message_at timestamptz
)
language sql
security definer
set search_path = public
as $$
  select
    d.id as document_id,
    d.name as document_name,
    max(m.created_at) as last_message_at
  from
    documents d
  join
    messages m on d.id = m.document_id
  where
    d.user_id = auth.uid()
  group by
    d.id, d.name
  order by
    last_message_at desc;
$$;
comment on function public.get_user_chat_history is 'Retrieves a summary of a user''s chat sessions, grouped by document.';


-- 5. Set up Storage
insert into storage.buckets (id, name, public)
values ('documents', 'documents', false)
on conflict (id) do nothing;

create policy "Users can manage their own document files"
on storage.objects for all
to authenticated
using ( bucket_id = 'documents' and (storage.foldername(name))[1] = auth.uid()::text );

-- 6. Insert default data
-- Insert default app settings. The application code will also handle this, but it's good practice for initial setup.
insert into public.app_settings (id, landing_page_content) values (1, '{
    "hero": {
        "cta_button": "Upload PDF",
        "subheadline": "Upload a PDF and get instant answers to your questions with the power of AI.",
        "cta_secondary": "No credit card required",
        "headline_part_1": "Chat with your",
        "headline_part_2": "using AI",
        "headline_animated_texts": ["documents", "reports", "manuals", "textbooks"]
    },
    "faq": {
        "items": [
            { "answer": "Doc-Chat AI uses advanced large language models to analyze the content of your PDF documents. Once you upload a file, our AI reads and understands the text, allowing you to ask questions and receive intelligent, context-aware answers in a conversational format.", "question": "How does Doc-Chat AI work?" },
            { "answer": "Yes, security is our top priority. All documents are encrypted in transit and at rest. We do not use your data for training our models. You have full control over your documents and can delete them from our servers at any time.", "question": "Is my data secure?" },
            { "answer": "Currently, we support PDF documents. We are working on expanding our capabilities to include other formats like DOCX, TXT, and more in the near future. The maximum file size depends on your subscription plan.", "question": "What kind of documents can I upload?" },
            { "answer": "Absolutely. You can manage your subscription from your account settings. If you cancel, you will retain access to your plan''s features until the end of the current billing cycle. There are no cancellation fees.", "question": "Can I cancel my subscription anytime?" }
        ],
        "headline": "Frequently Asked Questions",
        "subheadline": "Have questions? We''ve got answers. If you can''t find what you''re looking for, feel free to contact us."
    },
    "features": {
        "items": [
            { "icon": "UploadCloud", "title": "Seamless PDF Upload", "description": "Drag and drop any PDF to get started. Your documents are processed quickly and securely." },
            { "icon": "Sparkles", "title": "Intelligent AI-Powered Q&A", "description": "Ask complex questions and receive accurate, context-aware answers in seconds." },
            { "icon": "ShieldCheck", "title": "Secure & Private by Design", "description": "Your data is encrypted and confidential. Chat with your documents with complete peace of mind." }
        ],
        "headline": "A Smarter Way to Work With Documents",
        "subheadline": "Doc-Chat AI transforms your static documents into dynamic conversational partners."
    },
    "pricing": {
        "headline": "Choose the Plan That''s Right for You",
        "plans": [
            { "cta": "Start for Free", "link": "/app", "name": "Free", "price": "$0", "period": "/ month", "features": ["3 PDF uploads / month", "50 questions / month", "2MB file size limit", "Community support"], "isPopular": false, "description": "For individuals and small projects to get a taste of AI power." },
            { "cta": "Go Pro", "link": "/app", "name": "Pro", "price": "$19", "period": "/ month", "features": ["Unlimited PDF uploads", "Unlimited questions", "32MB file size limit", "Priority email support", "Advanced AI models"], "isPopular": true, "description": "For professionals and teams who need unlimited power." }
        ],
        "subheadline": "Simple, transparent pricing. No hidden fees."
    },
    "legal_pages": {
        "about": { "title": "About Us", "content": "This is the default about us page. Please update this content from the Super Admin settings." },
        "terms": { "title": "Terms of Service", "content": "These are the default terms of service. Please update this content from the Super Admin settings." },
        "contact": { "title": "Contact Us", "content": "This is the default contact page. Please update this content from the Super Admin settings." },
        "privacy": { "title": "Privacy Policy", "content": "This is the default privacy policy. Please update this content from the Super Admin settings." }
    }
}') on conflict (id) do nothing;
