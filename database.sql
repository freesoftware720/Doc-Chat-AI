
-- Create custom types
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'workspace_role') THEN
        CREATE TYPE public.workspace_role AS ENUM ('admin', 'member');
    END IF;
END$$;


-- Create Profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name text,
    avatar_url text,
    subscription_plan text DEFAULT 'Free'::text,
    status text DEFAULT 'active'::text,
    ban_reason text,
    banned_at timestamp with time zone,
    active_workspace_id uuid,
    referral_code text UNIQUE,
    referred_by uuid REFERENCES public.profiles(id),
    pro_credits integer DEFAULT 0,
    chat_credits_used integer NOT NULL DEFAULT 0,
    chat_credits_last_reset timestamp with time zone
);

-- Create Workspaces table
CREATE TABLE IF NOT EXISTS public.workspaces (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    owner_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name text NOT NULL,
    logo_url text,
    brand_color text,
    max_documents integer NOT NULL DEFAULT 3,
    allowed_file_types text[] DEFAULT ARRAY['application/pdf']::text[]
);

-- Add foreign key from profiles to workspaces after workspaces table is created
-- This avoids a circular dependency issue if we defined it inline
-- Check if constraint exists before adding
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint 
        WHERE conname = 'profiles_active_workspace_id_fkey'
        AND conrelid = 'public.profiles'::regclass
    ) THEN
        ALTER TABLE public.profiles 
        ADD CONSTRAINT profiles_active_workspace_id_fkey 
        FOREIGN KEY (active_workspace_id) 
        REFERENCES public.workspaces(id) ON DELETE SET NULL;
    END IF;
END$$;


-- Create Workspace Members table
CREATE TABLE IF NOT EXISTS public.workspace_members (
    workspace_id uuid NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role public.workspace_role NOT NULL DEFAULT 'member'::public.workspace_role,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    PRIMARY KEY (workspace_id, user_id)
);


-- Create Documents table
CREATE TABLE IF NOT EXISTS public.documents (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name text NOT NULL,
    storage_path text NOT NULL,
    content text,
    file_size integer
);

-- Create Messages table
CREATE TABLE IF NOT EXISTS public.messages (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    document_id uuid NOT NULL REFERENCES public.documents(id) ON DELETE CASCADE,
    role text NOT NULL,
    content text NOT NULL
);

-- Create Audit Logs table
CREATE TABLE IF NOT EXISTS public.audit_logs (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    workspace_id uuid NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    user_email text,
    action text NOT NULL,
    details jsonb
);

-- Create Referrals table
CREATE TABLE IF NOT EXISTS public.referrals (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    referrer_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    referred_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    created_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Create App Settings table
CREATE TABLE IF NOT EXISTS public.app_settings (
    id smallint PRIMARY KEY,
    logo_url text,
    homepage_announcement_message text,
    chat_limit_free_user integer NOT NULL DEFAULT 50,
    feature_multi_pdf_enabled boolean NOT NULL DEFAULT false,
    feature_chat_templates_enabled boolean NOT NULL DEFAULT true,
    landing_page_content jsonb,
    updated_at timestamp with time zone
);


-- Secure the tables with Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.workspace_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.audit_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.referrals ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.app_settings ENABLE ROW LEVEL SECURITY;

-- Define RLS policies
DROP POLICY IF EXISTS "Users can view their own profile" ON public.profiles;
CREATE POLICY "Users can view their own profile" ON public.profiles FOR SELECT USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can view workspaces they are a member of" ON public.workspaces;
CREATE POLICY "Users can view workspaces they are a member of" ON public.workspaces FOR SELECT USING (
    id IN (
        SELECT workspace_id FROM public.workspace_members WHERE user_id = auth.uid()
    )
);

DROP POLICY IF EXISTS "Admins can update their own workspace" ON public.workspaces;
CREATE POLICY "Admins can update their own workspace" ON public.workspaces FOR UPDATE USING (
    id IN (
        SELECT workspace_id FROM public.workspace_members WHERE user_id = auth.uid() AND role = 'admin'
    )
) WITH CHECK (
    id IN (
        SELECT workspace_id FROM public.workspace_members WHERE user_id = auth.uid() AND role = 'admin'
    )
);

DROP POLICY IF EXISTS "Members can view other members of the same workspace" ON public.workspace_members;
CREATE POLICY "Members can view other members of the same workspace" ON public.workspace_members FOR SELECT USING (
    workspace_id IN (
        SELECT workspace_id FROM public.workspace_members WHERE user_id = auth.uid()
    )
);

DROP POLICY IF EXISTS "Users can view their own documents" ON public.documents;
CREATE POLICY "Users can view their own documents" ON public.documents FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert their own documents" ON public.documents;
CREATE POLICY "Users can insert their own documents" ON public.documents FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own documents" ON public.documents;
CREATE POLICY "Users can update their own documents" ON public.documents FOR UPDATE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own documents" ON public.documents;
CREATE POLICY "Users can delete their own documents" ON public.documents FOR DELETE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can view their own messages" ON public.messages;
CREATE POLICY "Users can view their own messages" ON public.messages FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert their own messages" ON public.messages;
CREATE POLICY "Users can insert their own messages" ON public.messages FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own messages" ON public.messages;
CREATE POLICY "Users can update their own messages" ON public.messages FOR UPDATE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own messages" ON public.messages;
CREATE POLICY "Users can delete their own messages" ON public.messages FOR DELETE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Workspace admins can view their audit logs" ON public.audit_logs;
CREATE POLICY "Workspace admins can view their audit logs" ON public.audit_logs FOR SELECT USING (
    workspace_id IN (
        SELECT workspace_id FROM public.workspace_members WHERE user_id = auth.uid() AND role = 'admin'
    )
);

DROP POLICY IF EXISTS "Users can view their own referrals" ON public.referrals;
CREATE POLICY "Users can view their own referrals" ON public.referrals FOR SELECT USING (auth.uid() = referrer_id OR auth.uid() = referred_id);

DROP POLICY IF EXISTS "All users can read app settings" ON public.app_settings;
CREATE POLICY "All users can read app settings" ON public.app_settings FOR SELECT USING (true);


-- DB functions

-- Function to generate a unique 8-character referral code
CREATE OR REPLACE FUNCTION public.generate_referral_code()
RETURNS text
LANGUAGE plpgsql
AS $$
DECLARE
    new_code text;
    is_unique boolean;
BEGIN
    LOOP
        new_code := upper(substring(md5(random()::text) for 8));
        SELECT NOT EXISTS (SELECT 1 FROM public.profiles WHERE referral_code = new_code) INTO is_unique;
        IF is_unique THEN
            RETURN new_code;
        END IF;
    END LOOP;
END;
$$;


-- Function to be called on new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Insert a new profile for the new user
    INSERT INTO public.profiles (id, full_name, avatar_url, referral_code)
    VALUES (
        new.id,
        new.raw_user_meta_data->>'full_name',
        new.raw_user_meta_data->>'avatar_url',
        public.generate_referral_code()
    );

    -- Create a personal workspace for the new user
    -- We will set this as active in the app logic on first login
    INSERT INTO public.workspaces (owner_id, name)
    VALUES (new.id, new.raw_user_meta_data->>'full_name' || '''s Workspace');
    
    RETURN new;
END;
$$;

-- Trigger to call the function when a new user is created in auth.users
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user();


-- Function to get a user's chat history
CREATE OR REPLACE FUNCTION public.get_user_chat_history()
RETURNS TABLE(document_id uuid, document_name text, last_message_at timestamp with time zone)
LANGUAGE sql
SECURITY DEFINER
AS $$
    SELECT
        d.id as document_id,
        d.name as document_name,
        MAX(m.created_at) as last_message_at
    FROM
        public.documents d
    JOIN
        public.messages m ON d.id = m.document_id
    WHERE
        d.user_id = auth.uid()
    GROUP BY
        d.id, d.name
    ORDER BY
        last_message_at DESC;
$$;
