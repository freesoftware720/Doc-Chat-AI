-- This script is designed to be idempotent, meaning it can be run multiple times without causing errors.
-- It will only create objects if they do not already exist.

-- Create the workspace_role enum type if it doesn't exist
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'workspace_role') THEN
        CREATE TYPE public.workspace_role AS ENUM ('admin', 'member');
    END IF;
END$$;


-- Workspaces Table
CREATE TABLE IF NOT EXISTS public.workspaces (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    owner_id uuid NOT NULL,
    name text NOT NULL,
    logo_url text,
    brand_color text,
    max_documents integer NOT NULL DEFAULT 10,
    allowed_file_types text[] DEFAULT ARRAY['application/pdf']::text[]
);


-- Profiles Table
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid NOT NULL PRIMARY KEY,
    full_name text,
    avatar_url text,
    subscription_plan text,
    active_workspace_id uuid,
    referral_code text UNIQUE,
    referred_by uuid,
    pro_credits integer DEFAULT 0,
    status text DEFAULT 'active'::text,
    ban_reason text,
    banned_at timestamp with time zone,
    chat_credits_used integer NOT NULL DEFAULT 0,
    chat_credits_last_reset timestamp with time zone
);


-- Workspace Members Table
CREATE TABLE IF NOT EXISTS public.workspace_members (
    workspace_id uuid NOT NULL,
    user_id uuid NOT NULL,
    role public.workspace_role NOT NULL DEFAULT 'member'::workspace_role,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    PRIMARY KEY (workspace_id, user_id)
);


-- Documents Table
CREATE TABLE IF NOT EXISTS public.documents (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    name text NOT NULL,
    content text,
    user_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    storage_path text NOT NULL,
    file_size integer
);


-- Messages Table
CREATE TABLE IF NOT EXISTS public.messages (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    content text NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    role text NOT NULL,
    user_id uuid NOT NULL,
    document_id uuid NOT NULL
);


-- Referrals Table
CREATE TABLE IF NOT EXISTS public.referrals (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    referrer_id uuid NOT NULL,
    referred_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now()
);


-- Audit Logs Table
CREATE TABLE IF NOT EXISTS public.audit_logs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    workspace_id uuid NOT NULL,
    user_id uuid,
    user_email text,
    action text NOT NULL,
    details jsonb,
    created_at timestamp with time zone NOT NULL DEFAULT now()
);


-- App Settings Table (singleton)
CREATE TABLE IF NOT EXISTS public.app_settings (
    id smallint PRIMARY KEY CHECK (id = 1),
    chat_limit_free_user integer NOT NULL DEFAULT 50,
    feature_chat_templates_enabled boolean NOT NULL DEFAULT true,
    feature_multi_pdf_enabled boolean NOT NULL DEFAULT false,
    homepage_announcement_message text,
    logo_url text,
    landing_page_content jsonb,
    updated_at timestamp with time zone
);


-- Payment Gateways Table (The missing table)
CREATE TABLE IF NOT EXISTS public.payment_gateways (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    icon_url text,
    instructions text NOT NULL,
    is_active boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone NOT NULL DEFAULT now()
);


-- Foreign Key Constraints (wrapped in DO block to avoid errors on re-run)
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'workspaces_owner_id_fkey') THEN
        ALTER TABLE public.workspaces ADD CONSTRAINT workspaces_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES auth.users(id) ON DELETE CASCADE;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'profiles_id_fkey') THEN
        ALTER TABLE public.profiles ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;
    END IF;
     IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'profiles_active_workspace_id_fkey') THEN
        ALTER TABLE public.profiles ADD CONSTRAINT profiles_active_workspace_id_fkey FOREIGN KEY (active_workspace_id) REFERENCES public.workspaces(id) ON DELETE SET NULL;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'profiles_referred_by_fkey') THEN
        ALTER TABLE public.profiles ADD CONSTRAINT profiles_referred_by_fkey FOREIGN KEY (referred_by) REFERENCES public.profiles(id) ON DELETE SET NULL;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'workspace_members_user_id_fkey') THEN
        ALTER TABLE public.workspace_members ADD CONSTRAINT workspace_members_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'workspace_members_workspace_id_fkey') THEN
        ALTER TABLE public.workspace_members ADD CONSTRAINT workspace_members_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id) ON DELETE CASCADE;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'documents_user_id_fkey') THEN
        ALTER TABLE public.documents ADD CONSTRAINT documents_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'messages_user_id_fkey') THEN
        ALTER TABLE public.messages ADD CONSTRAINT messages_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'messages_document_id_fkey') THEN
        ALTER TABLE public.messages ADD CONSTRAINT messages_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id) ON DELETE CASCADE;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'referrals_referrer_id_fkey') THEN
        ALTER TABLE public.referrals ADD CONSTRAINT referrals_referrer_id_fkey FOREIGN KEY (referrer_id) REFERENCES public.profiles(id) ON DELETE CASCADE;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'referrals_referred_id_fkey') THEN
        ALTER TABLE public.referrals ADD CONSTRAINT referrals_referred_id_fkey FOREIGN KEY (referred_id) REFERENCES public.profiles(id) ON DELETE CASCADE;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'audit_logs_workspace_id_fkey') THEN
        ALTER TABLE public.audit_logs ADD CONSTRAINT audit_logs_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id) ON DELETE CASCADE;
    END IF;
END$$;


-- Functions
-- Function to generate a unique referral code
CREATE OR REPLACE FUNCTION public.generate_referral_code()
RETURNS text
LANGUAGE plpgsql
AS $$
DECLARE
    new_code text;
    is_duplicate boolean;
BEGIN
    LOOP
        new_code := upper(substring(md5(random()::text) for 8));
        SELECT EXISTS (SELECT 1 FROM public.profiles WHERE referral_code = new_code) INTO is_duplicate;
        IF NOT is_duplicate THEN
            RETURN new_code;
        END IF;
    END LOOP;
END;
$$;

-- Function to handle new user setup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    INSERT INTO public.profiles (id, full_name, avatar_url, referral_code)
    VALUES (
        new.id,
        new.raw_user_meta_data->>'full_name',
        new.raw_user_meta_data->>'avatar_url',
        public.generate_referral_code()
    );
    RETURN new;
END;
$$;

-- Function to get user chat history
CREATE OR REPLACE FUNCTION public.get_user_chat_history()
RETURNS TABLE(document_id uuid, document_name text, last_message_at timestamp with time zone)
LANGUAGE sql
SECURITY DEFINER
AS $$
    SELECT
        d.id as document_id,
        d.name as document_name,
        MAX(m.created_at) as last_message_at
    FROM
        public.documents d
    JOIN
        public.messages m ON d.id = m.document_id
    WHERE
        d.user_id = auth.uid()
    GROUP BY
        d.id, d.name
    ORDER BY
        last_message_at DESC;
$$;

-- Triggers
-- Trigger for new user setup
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'on_auth_user_created') THEN
        CREATE TRIGGER on_auth_user_created
            AFTER INSERT ON auth.users
            FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
    END IF;
END;
$$;


-- RLS Policies
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow individual read access" ON public.profiles;
CREATE POLICY "Allow individual read access" ON public.profiles FOR SELECT USING (auth.uid() = id);
DROP POLICY IF EXISTS "Allow individual update access" ON public.profiles;
CREATE POLICY "Allow individual update access" ON public.profiles FOR UPDATE USING (auth.uid() = id);

ALTER TABLE public.workspaces ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow individual read access" ON public.workspaces;
CREATE POLICY "Allow individual read access" ON public.workspaces FOR SELECT USING (id IN (
    SELECT workspace_id FROM public.workspace_members WHERE user_id = auth.uid()
));

ALTER TABLE public.workspace_members ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow individual read access" ON public.workspace_members;
CREATE POLICY "Allow individual read access" ON public.workspace_members FOR SELECT USING (user_id = auth.uid());

ALTER TABLE public.documents ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow individual access" ON public.documents;
CREATE POLICY "Allow individual access" ON public.documents FOR ALL USING (user_id = auth.uid());

ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow individual access" ON public.messages;
CREATE POLICY "Allow individual access" ON public.messages FOR ALL USING (user_id = auth.uid());

ALTER TABLE public.referrals ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow read access based on involvement" ON public.referrals;
CREATE POLICY "Allow read access based on involvement" ON public.referrals FOR SELECT USING (auth.uid() = referrer_id OR auth.uid() = referred_id);

ALTER TABLE public.app_settings ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access" ON public.app_settings;
CREATE POLICY "Allow public read access" ON public.app_settings FOR SELECT USING (true);

ALTER TABLE public.payment_gateways ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access for active gateways" ON public.payment_gateways;
CREATE POLICY "Allow public read access for active gateways" ON public.payment_gateways FOR SELECT USING (is_active = true);


-- Storage Buckets
-- Documents Bucket
INSERT INTO storage.buckets (id, name, public)
VALUES ('documents', 'documents', true)
ON CONFLICT (id) DO NOTHING;

DROP POLICY IF EXISTS "Allow public read access to documents" ON storage.objects;
CREATE POLICY "Allow public read access to documents" ON storage.objects FOR SELECT USING (bucket_id = 'documents');
DROP POLICY IF EXISTS "Allow authenticated users to upload documents" ON storage.objects;
CREATE POLICY "Allow authenticated users to upload documents" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'documents' AND auth.role() = 'authenticated');
DROP POLICY IF EXISTS "Allow authenticated users to update their documents" ON storage.objects;
CREATE POLICY "Allow authenticated users to update their documents" ON storage.objects FOR UPDATE WITH CHECK (bucket_id = 'documents' AND auth.uid() = owner);
DROP POLICY IF EXISTS "Allow authenticated users to delete their documents" ON storage.objects;
CREATE POLICY "Allow authenticated users to delete their documents" ON storage.objects FOR DELETE WITH CHECK (bucket_id = 'documents' AND auth.uid() = owner);
