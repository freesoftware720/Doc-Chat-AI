-- DocuChat SQL Setup Script
-- This script is idempotent and can be run multiple times safely.

-- 1. Create custom types
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'workspace_role') THEN
        CREATE TYPE public.workspace_role AS ENUM ('admin', 'member');
    END IF;
END$$;

-- 2. Create tables
CREATE TABLE IF NOT EXISTS public.workspaces (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    owner_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    logo_url TEXT,
    brand_color TEXT,
    max_documents INT NOT NULL DEFAULT 3,
    allowed_file_types TEXT[] DEFAULT ARRAY['application/pdf'],
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name TEXT,
    avatar_url TEXT,
    subscription_plan TEXT DEFAULT 'Free',
    active_workspace_id uuid REFERENCES public.workspaces(id) ON DELETE SET NULL,
    referral_code TEXT UNIQUE,
    referred_by uuid REFERENCES public.profiles(id) ON DELETE SET NULL,
    pro_credits INT DEFAULT 0,
    chat_credits_used INT NOT NULL DEFAULT 0,
    chat_credits_last_reset TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    status TEXT DEFAULT 'active',
    ban_reason TEXT,
    banned_at TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS public.workspace_members (
    workspace_id uuid NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role public.workspace_role NOT NULL DEFAULT 'member',
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    PRIMARY KEY (workspace_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.documents (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    content TEXT,
    storage_path TEXT NOT NULL,
    file_size INT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

CREATE TABLE IF NOT EXISTS public.messages (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    document_id uuid NOT NULL REFERENCES public.documents(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role TEXT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

CREATE TABLE IF NOT EXISTS public.audit_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    workspace_id uuid NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    user_email TEXT,
    action TEXT NOT NULL,
    details JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

CREATE TABLE IF NOT EXISTS public.referrals (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    referrer_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    referred_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE(referrer_id, referred_id)
);

CREATE TABLE IF NOT EXISTS public.app_settings (
    id INT PRIMARY KEY,
    chat_limit_free_user INT NOT NULL DEFAULT 50,
    feature_chat_templates_enabled BOOLEAN NOT NULL DEFAULT true,
    feature_multi_pdf_enabled BOOLEAN NOT NULL DEFAULT false,
    homepage_announcement_message TEXT,
    logo_url TEXT,
    landing_page_content JSONB,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 3. Create helper functions
CREATE OR REPLACE FUNCTION public.generate_referral_code()
RETURNS TEXT AS $$
BEGIN
    RETURN lower(substring(replace(gen_random_uuid()::text, '-', ''), 1, 8));
END;
$$ LANGUAGE plpgsql;

-- Function to handle new user setup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url, referral_code)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'full_name',
    NEW.raw_user_meta_data->>'avatar_url',
    public.generate_referral_code()
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- RPC function for chat history
CREATE OR REPLACE FUNCTION public.get_user_chat_history()
RETURNS TABLE(document_id uuid, document_name text, last_message_at timestamptz)
AS $$
BEGIN
    RETURN QUERY
    WITH latest_messages AS (
        SELECT
            m.document_id,
            MAX(m.created_at) as max_created_at
        FROM public.messages m
        WHERE m.user_id = auth.uid()
        GROUP BY m.document_id
    )
    SELECT
        d.id as document_id,
        d.name as document_name,
        lm.max_created_at as last_message_at
    FROM latest_messages lm
    JOIN public.documents d ON lm.document_id = d.id
    WHERE d.user_id = auth.uid()
    ORDER BY lm.max_created_at DESC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 4. Set up triggers
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 5. Set up Row Level Security (RLS)
-- Enable RLS for all tables
ALTER TABLE public.workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.workspace_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.audit_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.referrals ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.app_settings ENABLE ROW LEVEL SECURITY;

-- Helper function to check workspace membership
CREATE OR REPLACE FUNCTION is_workspace_member(p_workspace_id uuid, p_user_id uuid)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM public.workspace_members
        WHERE workspace_id = p_workspace_id AND user_id = p_user_id
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Helper function to check workspace admin role
CREATE OR REPLACE FUNCTION get_workspace_role(p_workspace_id uuid, p_user_id uuid)
RETURNS public.workspace_role AS $$
DECLARE
    v_role public.workspace_role;
BEGIN
    SELECT role INTO v_role
    FROM public.workspace_members
    WHERE workspace_id = p_workspace_id AND user_id = p_user_id;
    RETURN v_role;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- RLS Policies
-- WORKSPACES
DROP POLICY IF EXISTS "Users can view workspaces they are members of" ON public.workspaces;
CREATE POLICY "Users can view workspaces they are members of" ON public.workspaces
FOR SELECT USING (is_workspace_member(id, auth.uid()));

DROP POLICY IF EXISTS "Admins can update their own workspace" ON public.workspaces;
CREATE POLICY "Admins can update their own workspace" ON public.workspaces
FOR UPDATE USING (get_workspace_role(id, auth.uid()) = 'admin');

DROP POLICY IF EXISTS "Owner can delete their own workspace" ON public.workspaces;
CREATE POLICY "Owner can delete their own workspace" ON public.workspaces
FOR DELETE USING (owner_id = auth.uid());

-- PROFILES
DROP POLICY IF EXISTS "Users can view their own profile" ON public.profiles;
CREATE POLICY "Users can view their own profile" ON public.profiles
FOR SELECT USING (id = auth.uid());

DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
CREATE POLICY "Users can update their own profile" ON public.profiles
FOR UPDATE USING (id = auth.uid());

DROP POLICY IF EXISTS "Authenticated users can view other profiles for referral system" ON public.profiles;
CREATE POLICY "Authenticated users can view other profiles for referral system" ON public.profiles
FOR SELECT TO authenticated USING (true);

-- WORKSPACE_MEMBERS
DROP POLICY IF EXISTS "Members can view other members of the same workspace" ON public.workspace_members;
CREATE POLICY "Members can view other members of the same workspace" ON public.workspace_members
FOR SELECT USING (is_workspace_member(workspace_id, auth.uid()));

DROP POLICY IF EXISTS "Admins can manage workspace members" ON public.workspace_members;
CREATE POLICY "Admins can manage workspace members" ON public.workspace_members
FOR ALL USING (get_workspace_role(workspace_id, auth.uid()) = 'admin');

-- DOCUMENTS
DROP POLICY IF EXISTS "Users can view their own documents" ON public.documents;
CREATE POLICY "Users can view their own documents" ON public.documents
FOR SELECT USING (user_id = auth.uid());

DROP POLICY IF EXISTS "Users can insert their own documents" ON public.documents;
CREATE POLICY "Users can insert their own documents" ON public.documents
FOR INSERT WITH CHECK (user_id = auth.uid());

DROP POLICY IF EXISTS "Users can delete their own documents" ON public.documents;
CREATE POLICY "Users can delete their own documents" ON public.documents
FOR DELETE USING (user_id = auth.uid());

-- MESSAGES
DROP POLICY IF EXISTS "Users can view their own messages" ON public.messages;
CREATE POLICY "Users can view their own messages" ON public.messages
FOR SELECT USING (user_id = auth.uid());

DROP POLICY IF EXISTS "Users can insert their own messages" ON public.messages;
CREATE POLICY "Users can insert their own messages" ON public.messages
FOR INSERT WITH CHECK (user_id = auth.uid());

-- AUDIT_LOGS
DROP POLICY IF EXISTS "Admins can view audit logs for their workspace" ON public.audit_logs;
CREATE POLICY "Admins can view audit logs for their workspace" ON public.audit_logs
FOR SELECT USING (get_workspace_role(workspace_id, auth.uid()) = 'admin');

-- APP_SETTINGS
DROP POLICY IF EXISTS "Allow all users to read app settings" ON public.app_settings;
CREATE POLICY "Allow all users to read app settings" ON public.app_settings
FOR SELECT USING (true);

-- REFERRALS (No direct user access, managed by functions)
-- By default, no select/insert/update/delete policies means no access. This is intended.

-- 6. Grant usage on schema and functions to service_role (for admin actions)
GRANT USAGE ON SCHEMA public TO service_role;
GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;

-- 7. Insert default app settings
INSERT INTO public.app_settings (id, landing_page_content)
VALUES (1, '{
    "hero": {
        "headline_part_1": "Chat with your",
        "headline_animated_texts": ["documents", "reports", "manuals", "textbooks"],
        "headline_part_2": "using AI",
        "subheadline": "Upload a PDF and get instant answers to your questions with the power of AI.",
        "cta_button": "Upload PDF",
        "cta_secondary": "No credit card required"
    },
    "features": {
        "headline": "A Smarter Way to Work With Documents",
        "subheadline": "Doc-Chat AI transforms your static documents into dynamic conversational partners.",
        "items": [
            { "icon": "UploadCloud", "title": "Seamless PDF Upload", "description": "Drag and drop any PDF to get started. Your documents are processed quickly and securely." },
            { "icon": "Sparkles", "title": "Intelligent AI-Powered Q&A", "description": "Ask complex questions and receive accurate, context-aware answers in seconds." },
            { "icon": "ShieldCheck", "title": "Secure & Private by Design", "description": "Your data is encrypted and confidential. Chat with your documents with complete peace of mind." }
        ]
    },
    "pricing": {
        "headline": "Choose the Plan That''s Right for You",
        "subheadline": "Simple, transparent pricing. No hidden fees.",
        "plans": [
            { "name": "Free", "price": "$0", "period": "/ month", "description": "For individuals and small projects to get a taste of AI power.", "features": ["3 PDF uploads / month", "50 questions / month", "2MB file size limit", "Community support"], "cta": "Start for Free", "link": "/app", "isPopular": false },
            { "name": "Pro", "price": "$19", "period": "/ month", "description": "For professionals and teams who need unlimited power.", "features": ["Unlimited PDF uploads", "Unlimited questions", "32MB file size limit", "Priority email support", "Advanced AI models"], "cta": "Go Pro", "link": "/app", "isPopular": true }
        ]
    },
    "faq": {
        "headline": "Frequently Asked Questions",
        "subheadline": "Have questions? We''ve got answers. If you can''t find what you''re looking for, feel free to contact us.",
        "items": [
            { "question": "How does Doc-Chat AI work?", "answer": "Doc-Chat AI uses advanced large language models to analyze the content of your PDF documents. Once you upload a file, our AI reads and understands the text, allowing you to ask questions and receive intelligent, context-aware answers in a conversational format." },
            { "question": "Is my data secure?", "answer": "Yes, security is our top priority. All documents are encrypted in transit and at rest. We do not use your data for training our models. You have full control over your documents and can delete them from our servers at any time." },
            { "question": "What kind of documents can I upload?", "answer": "Currently, we support PDF documents. We are working on expanding our capabilities to include other formats like DOCX, TXT, and more in the near future. The maximum file size depends on your subscription plan." },
            { "question": "Can I cancel my subscription anytime?", "answer": "Absolutely. You can manage your subscription from your account settings. If you cancel, you will retain access to your plan''s features until the end of the current billing cycle. There are no cancellation fees." }
        ]
    },
    "legal_pages": {
        "privacy": {
            "title": "Privacy Policy",
            "content": "This is the default privacy policy. Please update this content from the Super Admin settings."
        },
        "terms": {
            "title": "Terms of Service",
            "content": "These are the default terms of service. Please update this content from the Super Admin settings."
        },
        "about": {
            "title": "About Us",
            "content": "This is the default about us page. Please update this content from the Super Admin settings."
        },
        "contact": {
            "title": "Contact Us",
            "content": "This is the default contact page. Please update this content from the Super Admin settings."
        }
    }
}'::jsonb)
ON CONFLICT (id) DO NOTHING;
